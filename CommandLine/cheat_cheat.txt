ls -alt # -a list all the file include hidden file starts with '.'
        # -l list file in long format; 
        #-t list file sort according to last time modified
cd ../home/jiaxing
pwd #print working directory
cp jason.txt file.txt document/
rm -r document  # recusively remove document dir and all its file and dir
mr a.txt b.txt  #rename
mr a.txt b.txt document/  # Move multiple files to dir
cat a.txt > b.txt # cat output the file content; > redirect the content to b.txt
echo "Hello" > hello.txt # echo response "Hello" string to hello.txt
touch a.txt # create a.txt 
mkdir user # make dir
cat a.txt >> b.txt # append a to the end of b.txt
$ cat volcanoes.txt | wc | cat > islands.txt
#Multiple |s can be chained together. Here the standard output of cat volcanoes.txt is "piped" to the wc command. The standard output of
# wc is then "piped" to cat. Finally, the standard output of cat is redirected to islands.txt.

cat a.txt | sort > b.txt # sort the content of a and overwrite to b.txt
sort a.txt | uniq >> b.txt # return the unique content form sorted a.txt and append to b.txt;
                        # uniq filter out adjacent duplicate lines in a file
grep -i Mount mountains.txt     #globle regular expression print  searches files for lines that match a pattern and returns the results.
                                #It is also case sensitive. Here, grep searches for "Mount" in mountains.txt.
                                #use -i option to enable case insensitive
                                
$ grep -Rl Arctic /home/ccuser/workspace/geography
#grep -R searches all files in a directory and outputs filenames and lines containing matched results. -R stands for "recursive". Here 
grep -R searches the /home/ccuser/workspace/geography directory for the string "Arctic" and outputs filenames and lines with matched 
results.

We'll begin by learning to use a simple, command line text editor called nano.

In the terminal, type
nano hello.txt
This will open the nano text editor.
2. In nano, at the top of the window, type

"Hello, I am nano."
Using the menu at the bottom of the terminal for reference, type Ctrl + O (the letter, not the number) to save the file. This is the letter "O", not the number zero.

Press Enter, when prompted about the filename to write.

Then type Ctrl + X to exit nano.

Finally, type clear to clear the terminal window. The command prompt should now be at the top of the window.
grep -Rl searches all files in a directory and outputs only filenames with matched results. -R stands for "recursive" and l stands for 
"files with matches". Here grep -Rl searches the /home/ccuser/workspace/geography directory for the string "Arctic" and outputs 
filenames with matched results.

$ sed 's/snow/rain/g' forests.txt
sed stands for "stream editor". It accepts standard input and modifies it based on an expression, before displaying it as output data. 
It is similar to "find and replace".
Let's look at the expression 's/snow/rain/':
s: stands for "substitution". it is always used when using sed for substitution.
snow: the search string, the text to find.
rain: the replacement string, the text to add in place.
In this case, sed searches forests.txt for the word "snow" and replaces it with "rain." Importantly, the above command will only 
replace the first instance of "SNOW" ON A LINE. g stands for globle it will replace all the instance with snow with rain.
> redirects standard output of a command to a file, overwriting previous content.
>> redirects standard output of a command to a file, appending new content to old content.
< redirects standard input to a command.
| redirects standard output of a command to another command.
A number of other commands are powerful when combined with redirection commands:

sort: sorts lines of text alphabetically.
uniq: filters duplicate, adjacent lines of text.
grep: searches for a text pattern and outputs it.
sed : searches for a text pattern, modifies it, and outputs it.
